{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled11.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyO8m+ag87M8vcab5QmAU1XA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Marco-438-tp555/Final_Project-438-TP555/blob/master/Channel_Estimation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v2LJuW7obO2L",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import math\n",
        "from models import interpolation , SRCNN_train , SRCNN_model, SRCNN_predict , DNCNN_train , DNCNN_model , DNCNN_predict\n",
        "#from scipy.misc import imresize\n",
        "from scipy.io import loadmat\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # load datasets \n",
        "    channel_model = \"VehA\"\n",
        "    SNR = 22\n",
        "    Number_of_pilots = 48\n",
        "    perfect = loadmat(\"Perfect_\"+ channel_model.mat')['My_perfect_H']\n",
        "    noisy_input = loadmat(\"Noisy_\" + channel_model + \"_\" + \"SNR_\" + str(SNR) + \".mat\") [channel_model+\"_noisy_\"+ str(SNR)]             \n",
        "                      \n",
        "    interp_noisy = interpolation(noisy_input , SNR , Number_of_pilots , 'rbf')\n",
        "    \n",
        "    \n",
        "    #interp_noisy = numpy.load('drive/codes/my_srcnn/SUI5_12_48_rbf.npy')\n",
        "    #perfect = loadmat('drive/codes/my_srcnn/SUI5_perfect.mat')['SUI5_perfect_H']\n",
        "    perfect_image = numpy.zeros((len(perfect),72,14,2))\n",
        "    perfect_image[:,:,:,0] = numpy.real(perfect)\n",
        "    perfect_image[:,:,:,1] = numpy.imag(perfect)\n",
        "    perfect_image = numpy.concatenate((perfect_image[:,:,:,0], perfect_image[:,:,:,1]), axis=0).reshape(2*len(perfect), 72, 14, 1)\n",
        "    \n",
        "    \n",
        "    ####### ------ training SRCNN ------ #######\n",
        "    idx_random = numpy.random.rand(len(perfect_image)) < (1/9)  # uses 32000 from 36000 as training and the rest as validation\n",
        "    train_data, train_label = interp_noisy[idx_random,:,:,:] , perfect_image[idx_random,:,:,:]\n",
        "    val_data, val_label = interp_noisy[~idx_random,:,:,:] , perfect_image[~idx_random,:,:,:]    \n",
        "    SRCNN_train(train_data ,train_label, val_data , val_label , channel_model , Number_of_pilots , SNR )\n",
        "    \n",
        "   \n",
        "    ####### ------ prediction using SRCNN ------ #######\n",
        "    srcnn_pred_train = SRCNN_predict(train_data, channel_model , num_pilots , SNR)\n",
        "    srcnn_pred_validation = SRCNN_predict(train_data, channel_model , num_pilots , SNR)  \n",
        "                      \n",
        "                      \n",
        "    ####### ------ training DNCNN ------ #######\n",
        "    DNCNN_train(input_data, channel_model , num_pilots , SNR):\n",
        "                      \n",
        "\n",
        "    \n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}